/** 
 * 
 */
package utbm.ia54.ant2dgrid.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import utbm.ia54.ant2dgrid.objects.Cell
import java.util.List
import utbm.ia54.ant2dgrid.events.ConfigureSimulation
import utbm.ia54.ant2dgrid.gui.Ant2DGridFxViewerController
import utbm.ia54.ant2dgrid.gui.fx.SendGrid
import io.sarl.core.InnerContextAccess
import io.sarl.core.Schedules
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle

/** 
 * @author Michel
 * 
 */
agent Environment {
	
	uses Lifecycle, DefaultContextInteractions, Behaviors, Schedules, Logging, InnerContextAccess

	var antQuantity : int
	var grid : List<Cell>
	var width : int
	var height : int
	
	var ctrl : Ant2DGridFxViewerController
	
	on Initialize {
		loggingName = "Environment " + this.ID
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent Environment was started.")
		// ctrl = occurrence.parameters.get(0) as Ant2DGridFxViewerController
		val listparam = occurrence.parameters.get(0) as List<Integer>
		val listparamgrid = occurrence.parameters.get(0) as List<List<Cell>>
		wake(new SendGrid(listparamgrid.get(3)))
		antQuantity = listparam.get(0)
		width = listparam.get(1)
		height = listparam.get(2)
		info(antQuantity)
		info(width)
		info(height)
	}
	
	on ConfigureSimulation{
		antQuantity = occurrence.antQuantity
		width = occurrence.width
		height = occurrence.height
		grid = occurrence.grid
		info("Environment initialized with param")
	}
	
	on SendGrid{
		grid = occurrence.grid
		info(grid)
	}
	
	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
