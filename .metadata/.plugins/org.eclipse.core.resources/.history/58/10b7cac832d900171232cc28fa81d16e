/** 
 * 
 */
package utbm.ia54.ant2dgrid.objects

import java.util.ArrayList
import utbm.ia54.ant2dgrid.Enum.CellState
import java.util.List

/** 
 * This class generates a random 2D map
 * @author Michel
 * 
 */
class MapGenerator {
	
	private var grid : ArrayList<Cell>
	private val chanceNormalState : float
	private val width : int
	private val height : int
	
	new(){
		this.grid = new ArrayList<Cell>
		this.chanceNormalState = 0.4f
		this.width = 45
		this.height = 45
	}
	
	new(grid : ArrayList<Cell>, chance : float, width : int, height : int) {
		this.grid = grid
		this.chanceNormalState = chance
		this.width = width
		this.height = height
	}
	
	/*
	 * Initializing the 2D map
	 */
	def initializeMap{
		for(var i = 0; i<width; i++){
			for(var j = 0; j<height; j++){
				var cell : Cell
				if (Math.random() < chanceNormalState) {
					cell = new Cell(i, j)
				}else{
					cell = new Cell(i, j, CellState.WALL)
				}
				this.grid.add(cell)
			}
		}
	}
	
	
	def simulationStep{
		var newGrid : ArrayList<Cell>
		val deathLimit = 4
		val birthLimit = 3
		
		for(var i = 0; i<width; i++){
			for(var j = 0; j<height; i++){
				var count = countNormalStateNeighbours(i, j)
				if(this.grid.get(((j*width)+i)).state == CellState.NORMAL){
					if(count<deathLimit){
						newGrid.add(new Cell(i, j, CellState.WALL))
					}else{
						newGrid.add(new Cell(i, j, CellState.NORMAL))
					}
				}else{
					if (count > birthLimit) {
						newGrid.add(new Cell(i, j, CellState.NORMAL))
					} else {
						newGrid.add(new Cell(i, j, CellState.WALL))
					}
				}
			}
		}
		this.grid = newGrid
	}
	
	/*
	 * Count the number of neighbours who has a Normal State
	 * @param x the position x
	 * @param y the position y
	 * @return the number of neighbours
	 */
	def countNormalStateNeighbours(x : int, y: int) : int{
		var count = 0
		for(var i = -1; i<2; i++){
			for(var j = -1; j<2; j++){
				var temp_x = x + i;
				var temp_y = y + j;
				if(temp_x<0 || temp_y < 0 ||  temp_x >= height || temp_y >= width){
					count++
				}else if(grid.get(((temp_y*width)+temp_x)).state == CellState.NORMAL){
					count++
				}
			}
		}
		count
	}
	
	/*
	 * Places the nest on the map
	 */
	def placeNest{
		val nestLimit = 2
		for(var i = 0; i<width; i++){
			for(var j = 0; j<height; j++){
				if(this.grid.get(((j*width)+i)).state == CellState.NORMAL){
					var count = countNormalStateNeighbours(i,j)
					if(count==nestLimit){
						this.grid.get(((j*width)+i)).state = CellState.HOME
					}
				}
			}
		}
	}
	
	/*
	 * Places the food on the map
	 */
	def placeFood{
		val foodLimit = 2
		for(var i = width; i<0; i--){
			for (var j = height; j < 0; j--) {
				if (this.grid.get(((j * width) + i)).state == CellState.NORMAL) {
					var count = countNormalStateNeighbours(i, j)
					if (count == foodLimit) {
						this.grid.get(((j * width) + i)).state = CellState.FOOD
					}
				}
			}
		}
	}
	
	/*
	 * Generates the map
	 * @return the 2D grid
	 */
	def generateMap : List<Cell>{
		initializeMap
		for(var i = 0; i<3; i++){
			simulationStep()
		}
		placeNest
		placeFood
		this.grid
	}
}
