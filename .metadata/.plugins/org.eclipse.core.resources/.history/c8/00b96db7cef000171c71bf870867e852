/** 
 * 
 */
package utbm.ia54.ant2dgrid.agents

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import utbm.ia54.ant2dgrid.objects.Vector2i
import utbm.ia54.ant2dgrid.events.Perception
import utbm.ia54.ant2dgrid.skills.MotionSkill
import java.util.UUID
import utbm.ia54.ant2dgrid.objects.AntBody
import utbm.ia54.ant2dgrid.events.AntInitialize
import io.sarl.core.DefaultContextInteractions
import utbm.ia54.ant2dgrid.capacities.MotionCapacity
import utbm.ia54.ant2dgrid.capacities.PheromoneCapacity
import utbm.ia54.ant2dgrid.events.AcceptInfluence
import utbm.ia54.ant2dgrid.skills.PheromoneSkill
import utbm.ia54.ant2dgrid.events.ChangeState

/** 
 * @author Michel
 * 
 */
agent Ant {
	uses Logging, DefaultContextInteractions, MotionCapacity, PheromoneCapacity
	
	/* ID of the environment agent */
	private var idEnv : UUID
	
	/* ID himself */
	private var selfIDAnt : int
	
	private var body : AntBody
	
	on Initialize {
		loggingName = "Ant " + this.ID
		this.body = new AntBody(this.ID, occurrence.parameters.get(1) as Vector2i)
		this.idEnv = occurrence.spawner
		this.selfIDAnt = occurrence.parameters.get(0) as Integer
		info("The agent Ant " + selfID + " was started.")
		setSkill(new MotionSkill, typeof(MotionCapacity))
		setSkill(new PheromoneSkill, typeof(PheromoneCapacity))
		emit(new AntInitialize(this.body))
	}

	on Destroy {
		info("The agent Ant " + selfID + " was stopped.")
	}
	
	def getSelfID : int{
		this.selfIDAnt
	}
	
	on Perception{
		var listPerception = occurrence.list.get(this.ID)
		//mappercept.get(this.ID)
		var tempVector : Vector2i
		if (!listPerception.isEmpty) {
			tempVector = followPheromone(listPerception, body.state).position
			if (tempVector.equals(new Vector2i(-1, -1))) {
				randomMove(listPerception, body)
			} else {
				tempVector = followPheromone(listPerception, body.state).position
				move(tempVector, body)
			}
		} else {
			stay(body)
		}
		//info("moved")
	}
	
	on AcceptInfluence {
		info(body.position + " move to " + occurrence.newpos)
		body.position = occurrence.newpos
	}
	
	on ChangeState{
		info(body.state + " change state to " + occurrence.newState)
		body.state = occurrence.newState
				
	}
	
	
}
