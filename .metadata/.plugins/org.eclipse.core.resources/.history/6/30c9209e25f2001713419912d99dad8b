/** 
 * 
 */
package utbm.ia54.ant2dgrid.skills

import utbm.ia54.ant2dgrid.objects.Vector2i
import java.util.UUID
import java.util.List
import utbm.ia54.ant2dgrid.objects.Cell
import utbm.ia54.ant2dgrid.capacities.EnvironmentManagerCapacity
import utbm.ia54.ant2dgrid.objects.AntBody
import utbm.ia54.ant2dgrid.Enum.CellState
import io.sarl.lang.core.Address
import java.util.Map
import java.util.HashMap
import java.util.ArrayList
import io.sarl.core.DefaultContextInteractions
import utbm.ia54.ant2dgrid.events.Influence
import java.util.concurrent.ThreadLocalRandom
import utbm.ia54.ant2dgrid.Enum.AntState
import utbm.ia54.ant2dgrid.capacities.AntCapacity
import utbm.ia54.ant2dgrid.events.PickFood
import utbm.ia54.ant2dgrid.events.PutFood

/** 
 * @author Michel
 * 
 */

/*
 * A default skill to manage an ant
 */
skill AntManagerSkill implements AntCapacity{
	
	uses DefaultContextInteractions
	
	/*The position before */
	var positionBefore : Vector2i
	
	/*
	 * Pick the food
	 * @param body the AntBody
	 */
	def pickUpFood(body : AntBody) {
		emit(new PickFood(body))
	}
	
	/*
	 * Put the food
	 * @param body the AntBody
	 */
	def putDownFood(body : AntBody) {
		emit(new PutFood(body))
	}
	
	/*
	 * Gets has food cell of the list
	 * @param list the perception of list of cell
	 * return true, if found
	 */
	private def hasFood(list : List<Cell>) : boolean {
		var bool = false
		for (cell : list) {
			if (cell.state === CellState.FOOD) {
				bool = true
			}
		}

		bool
	}
	
	/* 
	 * Gets has home cell of the list
	 * @param list the perception of list of cell
	 * @return true, if found
	 */
	private def hasHome(list : List<Cell>) : boolean {
		var bool = false
		for (cell : list) {
			if (cell.state === CellState.HOME) {
				bool = true
			}
		}

		bool
	}
	
	/* 
	 * Gets the number of cell has pheromone home on the cell
	 * @param list the perception of list of cell
	 * return i the number of cell has pheromone home on the cell
	 */
	private def countHasHomePherommoneCell(list : List<Cell>) : int {
		var i = 0
		for (cell : list) {
			if ((cell.pheromoneFood.intensity >= 0.01f && cell.state === CellState.NORMAL) || cell.state === CellState.HOME || cell.state === CellState.FOOD) {
				i++
			}
		}
		i
	}
	
	/*
	 * Gets the number of cell has normal, home and food state
	 * @param list the perception of list of cell
	 * return i the number of cell has normal state
	 */
	private def countNormalState(list : List<Cell>) : int {
		var i = 0
		for (cell : list) {
			if (cell.state === CellState.NORMAL || cell.state === CellState.FOOD || cell.state === CellState.HOME) {
				i++
			}
		}
		i
	}
	
	/* 
	 * Moves to a new position
	 * @param newpos The new position
	 * @param body an AntBody
	 */
	def move(newpos : Vector2i, body : AntBody) {
		emit(new Influence(newpos, body))
	}
	
	/* 
	 * Moves random to a new position
	 * @param listPerception the perception of the list of cell
	 * @param body an AntBody
	 */
	def randomMove(listPerception : List<Cell>, body : AntBody) {
		
		val randomNum = ThreadLocalRandom.current().nextInt(0, listPerception.length)
		var newPos : Vector2i
		var cell = listPerception.get(randomNum)
		var numberPheromoneCell = countHasHomePherommoneCell(listPerception)
		var numberNormalState = countNormalState(listPerception)
		
		if(numberNormalState === 1){
			if(cell.state === CellState.WALL){
				randomMove(listPerception, body)
			} else {
				newPos = cell.position
				emit(new Influence(newPos, body))
			}
		} else {
			switch (cell.state) {
				case CellState.NORMAL:
					if ((hasFood(listPerception) === true && body.state === AntState.SEARCH_FOOD) ||
						(hasHome(listPerception) === true && body.state === AntState.RETURN_HOME)) {
						randomMove(listPerception, body)
					} else {
						if ((numberNormalState - numberPheromoneCell)===0){
							if (isEquals(cell.position) === false) {
								newPos = cell.position
								emit(new Influence(newPos, body))
								setPositionBefore(newPos)
							}else{
								randomMove(listPerception, body)
							}
						} else {
							if ((numberNormalState - numberPheromoneCell) <= numberNormalState) {
								if ((0.1f > cell.pheromoneHomeIntensity || isEquals(cell.position)===false)) {
									newPos = cell.position
									emit(new Influence(newPos, body))
									setPositionBefore(newPos)
								} else {
									randomMove(listPerception, body)
								}
							} else {
								if (isEquals(cell.position) === false) {
									newPos = cell.position
									emit(new Influence(newPos, body))
									setPositionBefore(newPos)
								} else {
									randomMove(listPerception, body)
								}
							}
						}
					}
				case CellState.WALL:
					randomMove(listPerception, body)
				case CellState.HOME:
					if (isEquals(cell.position) === false) {
						newPos = cell.position
						emit(new Influence(newPos, body))
						setPositionBefore(newPos)
					} else {
						randomMove(listPerception, body)
					}
				case CellState.FOOD:
					if (body.state === AntState.SEARCH_FOOD || isEquals(cell.position)===false) {
						newPos = cell.position
						emit(new Influence(newPos, body))
						setPositionBefore(newPos)
					} else{
						randomMove(listPerception, body)
					}
			}
		}
		
	}
	
	/*
	 * Stays to the same position
	 * @param body an AntBody
	 */
	def stay(body : AntBody) {
		emit(new Influence(body.position, body))
	}
	
	/* 
	 * Sets the position before
	 * @param pos the position 
	 */
	def setPositionBefore(pos : Vector2i) {
		positionBefore = pos
	}
	
	/* 
	 * Gets if is equals of two position
	 * @param pos the posistion
	 * @return true, if equals
	 */
	private def isEquals(pos : Vector2i) : boolean {
		this.positionBefore.equals(pos)
	}
	
	/* 
	 * Select the best cell to move
	 * @param listPerception the perception of the list of cell
	 * @return tempCell the cell to move
	 */
	def followPheromone(listPerception : List<Cell>, state : AntState) : Cell {

		var tempCell : Cell
		var foodCell : Cell
		var homeCell : Cell
		var bool = false
		var food = false
		var home = false
		var pheromoneFood = 0f
		var pheromoneHome = 0f

		switch (state) {
			case AntState.SEARCH_FOOD:
				for (var i = 0; i < listPerception.length; i++) {
					if (food === false) {
						if (listPerception.get(i).state === CellState.FOOD) {
							foodCell = listPerception.get(i)
							tempCell = foodCell
							food = true
						} else {
							if (pheromoneFood < listPerception.get(i).pheromoneFoodIntensity &&
								isEquals(listPerception.get(i).position) === false) {
								pheromoneFood = listPerception.get(i).pheromoneFoodIntensity
								tempCell = listPerception.get(i)
								bool = true
							}
						}
					}
				}
			case AntState.RETURN_HOME:
				for (var i = 0; i < listPerception.length; i++) {
					if (home === false) {
						if (listPerception.get(i).state === CellState.HOME) {
							homeCell = listPerception.get(i)
							tempCell = homeCell
							home = true
						} else {
							if (pheromoneHome < listPerception.get(i).pheromoneHomeIntensity &&
								isEquals(listPerception.get(i).position) === false) {
								pheromoneHome = listPerception.get(i).pheromoneHomeIntensity
								tempCell = listPerception.get(i)
								bool = true
							}
						}
					}
				}
		}

		if (bool === false) {
			tempCell = new Cell(-1, -1)
		} else {
			setPositionBefore(tempCell.position)
		}
		tempCell
	}	
}

/* 
 * A default skill of the environment
 */
skill EnvironmentManagerSkill implements EnvironmentManagerCapacity{
	
	/*The number of rows */
	val width : int
	
	/*The number of cols */
	val height : int
	
	/*The grid contains all cells */
	var grid : List<Cell>
	
	/*The ant quantity */
	val antQuantity : int
	
	/*The home cell position */
	var homeCellPosition : int
	
	/*The food cell position */
	var foodCellPosition : int
	
	/*A map contains Address of Ant agent*/
	var antAddresses : Map<UUID, Address>
	
	/*
	 * The default constructor initializing with parameters
	 * @param width the number of cols
	 * @param height the number of rows
	 * @param grid the list of cell
	 * @param quantity the number of ant
	 */
	new(width : int, height : int, grid : List<Cell>, quantity : int) {
		this.width = width
		this.height = height
		this.grid = grid
		this.antQuantity = quantity
		this.antAddresses = new HashMap<UUID, Address>
		defineCell	
	}
	
	/*
	 * A function to define the position of food and home cell
	 */
	private def defineCell {
		for (var i = 0; i < width; i++) {
			for (var j = 0; j < height; j++) {
				if (grid.get(i * height + j).state === CellState.HOME) {
					homeCellPosition = (i * height + j)
				} else if (grid.get(i * height + j).state === CellState.FOOD) {
					foodCellPosition = (i * height + j)
				}
			}
		}
	}
	
	/*
	 * Gets the number of rows
	 * @return width
	 */
	def getWidth : int {
		this.width
	}
	
	/*Gets the numbers of cols
	 * @return height
	 */
	def getHeight : int {
		this.height
	}
	
	/*
	 * Gets the grid the list of cell
	 * @return grid the list of cell
	 */
	def getGrid : List<Cell> {
		this.grid
	}
	
	/*
	 * Gets the quantity of ant
	 * @param antQuantity
	 */
	def getAntQuantity : int{
		this.antQuantity
	}
	
	/*
	 * Creates an ant into a cell
	 * @param position the position of the cell
	 * @param id the UUID
	 * @param body the AntBody
	 */
	def createAnt (position : Vector2i, id : UUID, body : AntBody){
		this.grid.get(position.x * height + position.y).addAnt(id, body)
	}
	
	/*
	 * Gets the Home cell 
	 * @return home cell
	 */
	def getHomeCell : Cell {
		getCell(homeCellPosition)
	}
	
	/*
	 * Gets the food cell
	 * @return food cell
	 */
	def getFoodCell : Cell {
		getCell(foodCellPosition)
	}
	
	/*
	 * Gets the cell
	 * @param i the position of the cell in the list
	 * @return cell
	 */
	def getCell(i : int) : Cell {
		this.grid.get(i)
	}
	
	/*
	 * Sets the address into the map
	 * @param id the UUID
	 * @param address the address
	 */
	def setAddress(id : UUID, address : Address) {
		this.antAddresses.put(id, address)
	}
	
	/*
	 * Gets the address of an agent
	 * @param id the UUID
	 * @return address
	 */
	def getAddress(id : UUID): Address {
		this.antAddresses.get(id)
	}
	
	
	/*
	 * Gets the perception of an agent
	 * @param id the UUID
	 * @return list the list of cell
	 */
	def getPerception(id : UUID) : List<Cell> {
		var list = new ArrayList<Cell>
		var vector = getAntPosition(id)
		if((vector.x + 1) < width){
			list.add(grid.get((vector.x + 1) * height + vector.y))
		}
		if((vector.y + 1) < height){
			list.add(grid.get(vector.x * height + (vector.y + 1)))
		}
		if((vector.x - 1 )>-1){
			list.add(grid.get((vector.x - 1) * height + vector.y))
		}
		if((vector.y - 1) > -1){
			list.add(grid.get(vector.x * height + (vector.y - 1)))
		}
		
		list
	}
	
	/*
	 * Gets the map addresses
	 * @return antAddresses 
	 */
	def getAntAddresses : Map<UUID, Address> {
		this.antAddresses
	}
	
	/*
	 * Gets the ant position
	 * @param id the UUID
	 * @return v the position
	 */
	private def getAntPosition(id : UUID) : Vector2i {
		var v : Vector2i
		for (var i = 0; i < width; i++) {
			for (var j = 0; j < height; j++) {
				if(grid.get(i*height+j).antList.containsKey(id)){
					v = new Vector2i(i,j)
				}
			}
		}
		v
	}
	
	/*
	 * Removes an Ant of the cell
	 * @param position the position of the cell
	 * @param id the UUID
	 * @param body the AntBody
	 */
	def removeAntCell(position : Vector2i, id : UUID, body: AntBody) {
		getCell(position.x*height+position.y).removeAnt(id, body)
	}
	
}