/** 
 * 
 */
package utbm.ia54.ant2dgrid.skills

import utbm.ia54.ant2dgrid.capacities.PheromoneCapacity
import utbm.ia54.ant2dgrid.objects.Vector2i
import utbm.ia54.ant2dgrid.capacities.MotionCapacity
import java.util.UUID
import java.util.List
import utbm.ia54.ant2dgrid.Enum.Direction
import utbm.ia54.ant2dgrid.objects.Cell
import utbm.ia54.ant2dgrid.capacities.EnvironmentManagerCapacity
import utbm.ia54.ant2dgrid.objects.AntBody
import utbm.ia54.ant2dgrid.Enum.CellState
import io.sarl.core.InnerContextAccess
import utbm.ia54.ant2dgrid.events.Perception
import io.sarl.util.Scopes
import io.sarl.lang.core.Address
import java.util.Map
import java.util.HashMap
import java.util.ArrayList

/** 
 * @author Michel
 * 
 */
skill MotionSkill implements MotionCapacity{
	
	def move(direction : Direction) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def randomMove {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
}

skill PheromoneSkill implements PheromoneCapacity{
	
	def followPheromone(position : Vector2i) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
}

skill EnvironmentManagerSkill implements EnvironmentManagerCapacity{
	
	uses InnerContextAccess
	
	val width : int
	val height : int
	var grid : List<Cell>
	val antQuantity : int
	var homeCellPosition : int
	var foodCellPosition : int
	var antAddresses : Map<UUID, Address>
	
	new(width : int, height : int, grid : List<Cell>, quantity : int) {
		this.width = width
		this.height = height
		this.grid = grid
		this.antQuantity = quantity
		this.antAddresses = new HashMap<UUID, Address>
		defineCell	
	}
	
	private def defineCell {
		for (var i = 0; i < width; i++) {
			for (var j = 0; j < height; j++) {
				if (grid.get(i * height + j).state === CellState.HOME) {
					homeCellPosition = (i * height + j)
				} else if (grid.get(i * height + j).state === CellState.FOOD) {
					foodCellPosition = (i * height + j)
				}
			}
		}
	}
	
	def getWidth : int {
		this.width
	}
	
	def getHeight : int {
		this.height
	}
	
	def getGrid : List<Cell> {
		this.grid
	}
	
	def getAntQuantity : int{
		this.antQuantity
	}
	
	def createAnt (position : Vector2i, id : UUID, body : AntBody): AntBody {
		this.grid.get(position.x * height + position.y).addAnt(id, body)
	}
	
	def sendPerception(sender : UUID, id : UUID, list : List<Cell>) {
		innerContext.defaultSpace.emit(sender, new Perception(list), Scopes.addresses(getAddress(id)))
	}
	
	def getHomeCell : Cell {
		getCell(homeCellPosition)
	}
	
	def getFoodCell : Cell {
		getCell(foodCellPosition)
	}
	
	def getCell(i : int) : Cell {
		this.grid.get(i)
	}
	
	def setAddress(id : UUID, address : Address) {
		this.antAddresses.put(id, address)
	}
	
	private def getAddress(id : UUID){
		this.antAddresses.get(id)
	}
	
	def getPerception(id : UUID) : List<Cell> {
		var list = new ArrayList<Cell>
		var vector = getAntPosition(id)
		for (var i = -1; i < 2; i++) {
			for (var j = -1; j < 2; j++) {
				var temp_vector = new Vector2i(i, j)
				temp_vector.plus(vector)
				if (temp_vector.x*height+temp_vector.y<height*width) {
					if(temp_vector.x < 0 || temp_vector.y<0 || temp_vector.x>height || temp_vector.y>width){
						if ((i===0 && (j===-1 || j===1)) || (j ===0 && (i===-1 || i===1))) {
							list.add(grid.get(temp_vector.x * height + temp_vector.y))
						}
					}
				}
				
			}
		}
		list
	}
	
	def getAntAddresses : Map<UUID, Address> {
		this.antAddresses
	}
	
	private def getAntPosition(id : UUID) : Vector2i {
		var v : Vector2i
		for (var i = 0; i < width; i++) {
			for (var j = 0; j < height; j++) {
				if(grid.get(i*height+j).antList.containsKey(id)){
					v = new Vector2i(i,j)
				}
			}
		}
		v
	}
	
	def removeAntCell(position : Vector2i, id : UUID, body: AntBody) {
		getCell(position.x*height+position.y).removeAnt(id, body)
	}
	
}