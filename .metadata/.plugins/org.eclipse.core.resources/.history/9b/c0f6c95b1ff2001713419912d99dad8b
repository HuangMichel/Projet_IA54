/** 
 * 
 */
package utbm.ia54.ant2dgrid.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import utbm.ia54.ant2dgrid.gui.Ant2DGridFxViewerController
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import utbm.ia54.ant2dgrid.events.StartSimulation
import io.sarl.core.Destroy
import utbm.ia54.ant2dgrid.events.AntInitialize
import utbm.ia54.ant2dgrid.capacities.EnvironmentManagerCapacity
import utbm.ia54.ant2dgrid.skills.EnvironmentManagerSkill
import utbm.ia54.ant2dgrid.events.Continue
import io.sarl.util.Scopes
import utbm.ia54.ant2dgrid.events.Perception
import utbm.ia54.ant2dgrid.events.Influence
import utbm.ia54.ant2dgrid.Enum.CellState
import utbm.ia54.ant2dgrid.events.AcceptInfluence
import io.sarl.core.DefaultContextInteractions
import utbm.ia54.ant2dgrid.Enum.AntState
import utbm.ia54.ant2dgrid.events.ChangeState
import utbm.ia54.ant2dgrid.objects.Cell
import java.util.List
import java.util.UUID
import java.util.HashMap
import utbm.ia54.ant2dgrid.events.PickFood
import utbm.ia54.ant2dgrid.events.PutFood
import utbm.ia54.ant2dgrid.events.AcceptPickFood
import utbm.ia54.ant2dgrid.events.onNestPlace
import utbm.ia54.ant2dgrid.events.onFoodPlace
import io.sarl.core.Schedules
import utbm.ia54.ant2dgrid.gui.fx.AppExit

/** 
 * @author Michel
 * 
 */
agent Environment {
	
	uses Lifecycle, Logging, InnerContextAccess, EnvironmentManagerCapacity, DefaultContextInteractions, Schedules

	/* The fx viewer controller */
	private var ctrl : Ant2DGridFxViewerController = null
	
	/*An boolean to know if the app is launched */
	private var launched : Boolean = false
	
	/*The counter count the number of ant is updated */
	private var counter = 0
	
	/*A map of perception for each ant */
	private var perception = new HashMap<UUID,List<Cell>>
	
	private var updateList = new HashMap<UUID, Cell>
	
	private var took = false
	
	private var put = false
	
	on Initialize {
		loggingName = "Environment " + this.ID
		if (ctrl === null) {
			ctrl = occurrence.parameters.get(0) as Ant2DGridFxViewerController
		}
		setSkill(new EnvironmentManagerSkill(ctrl.width, ctrl.height, ctrl.grid, ctrl.antQuantity), typeof(EnvironmentManagerCapacity))
		info("The agent Environment was started.")
	}
	
	/*Initialize an ant body to the home cell */
	on AntInitialize [occurrence.isInInnerDefaultSpace] {
		counter += 1
		info("Ant " + counter + " created " + occurrence.source.UUID)
		setAddress(occurrence.source.UUID, occurrence.source)
		createAnt(homeCell.position, occurrence.source.UUID, occurrence.body)
		if (counter === ctrl.antQuantity){
			emit(new Continue)
			counter = 0
		}
	}
	
	/*Starting the simulation
	 * Spawn all ants
	 */
	on StartSimulation{
		info("Starting Simulation")
		for(var i = 0; i<antQuantity; i++){
			spawnInContext(typeof(Ant), innerContext,#[i+1, homeCell.position])
		}
	}
	
	on Continue{
		info("New cycle")
		if(!launched){
			synchronized(grid){
				antAddresses.forEach [ id, address |
					var list = getPerception(id)
					perception.put(id,list)
				]
				 
				if (getHomeCell.numberAnt > 0) {
					getHomeCell.antList.forEach [id, body|
						if (body.took === true) {
							info("ant " + body.ID + " putting food")
							innerContext.defaultSpace.emit(this.ID, new onNestPlace, Scopes.addresses(getAddress(body.ID)))
							this.put = true
						}
					]
				}
				
				if(getFoodCell.numberAnt>0){
					getFoodCell.antList.forEach [ id, body |
						if (body.took === false) {
							info("ant " + body.ID + " picking food")
							innerContext.defaultSpace.emit(this.ID, new onFoodPlace, Scopes.addresses(getAddress(body.ID)))
							this.took = true
						}
					]
				}

				in(1000)[innerContext.defaultSpace.emit(ID, new Perception(perception))]
				
				if (took === true) {
					grid.forEach [ cell |
						if (cell.state === CellState.NORMAL) {
							cell.evaporationPheromoneHome
						}
					]
					took = false
				}
				
				if (put === true) {
					grid.forEach [ cell |
						if (cell.state === CellState.NORMAL) {
							cell.evaporationPheromoneFood
						}
					]
					put = false
				}
				
			}
			
		}
	}
	
	/* */
	on PickFood [occurrence.isInInnerDefaultSpace] {
		var body = occurrence.body
		if(body.state===AntState.SEARCH_FOOD && body.took === false){
			if (getCell(body.position.x * height + body.position.y).state === CellState.FOOD) {
				info("Ant " + occurrence.body.ID + " is picking food")
				getCell(body.position.x * height + body.position.y).food.decrementFood(body.^capacity)
				getCell(body.position.x * height + body.position.y).antList.get(body.ID).setTook
				innerContext.defaultSpace.emit(this.ID,
					new AcceptPickFood(getCell(body.position.x * height + body.position.y).antList.get(body.ID).took),
					Scopes.addresses(occurrence.source))
			}
		}
	}
	
	/* */
	on PutFood [occurrence.isInInnerDefaultSpace] {
		var body = occurrence.body
		if (body.state === AntState.RETURN_HOME && body.took === true) {
			info("Ant " + occurrence.body.ID + " is putting food")
			getHomeCell.food.incrementFood(body.^capacity)
			getHomeCell.antList.get(body.ID).put
			innerContext.defaultSpace.emit(this.ID, new AcceptPickFood(getHomeCell.antList.get(body.ID).took),
				Scopes.addresses(occurrence.source))
		}
	}
	
	/* */
	on Influence [occurrence.isInInnerDefaultSpace] {
		var accept = false
		var body = occurrence.body
		var oldPosition = occurrence.body.position
		var newPosition = occurrence.newpos
	
		synchronized (grid) {
			if (getCell(newPosition.x * height + newPosition.y).state === CellState.NORMAL ||
				getCell(newPosition.x * height + newPosition.y).state === CellState.FOOD ||					
				getCell(newPosition.x * height + newPosition.y).state === CellState.HOME) {
				removeAntCell(oldPosition, body.ID, body)
				createAnt(newPosition, body.ID, body)
				accept = true
				
				switch (getCell(newPosition.x * height + newPosition.y).state){
					case CellState.FOOD:
						if (body.state === AntState.SEARCH_FOOD) {
							innerContext.defaultSpace.emit(this.ID, new ChangeState(AntState.RETURN_HOME),
								Scopes.addresses(occurrence.source))
						}
					case CellState.HOME:
						if (body.state === AntState.RETURN_HOME) {
							innerContext.defaultSpace.emit(this.ID, new ChangeState(AntState.SEARCH_FOOD),
								Scopes.addresses(occurrence.source))
						}
				}	
			}
		}

		counter += 1
		info(counter + " Ants updated")
		if (accept) {
			innerContext.defaultSpace.emit(this.ID,
				new AcceptInfluence(newPosition, accept),
				Scopes.addresses(occurrence.source))
			if (counter === ctrl.antQuantity) {
				counter = 0
				perception.clear
				emit(new Continue)
			}
		}
	}
	
	on Destroy{
		info("Agent Environment go die!")
	}
	
	on AppExit[!hasMemberAgent] {
		emit(new AppExit)
		killMe
	}
	
	on AppExit[hasMemberAgent] {
		innerContext.defaultSpace.emit(this.ID, new AppExit)
	}
}
