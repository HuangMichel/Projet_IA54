/** 
 * 
 */
package utbm.ia54.ant2dgrid.objects

import java.util.ArrayList
import utbm.ia54.ant2dgrid.agents.Ant
import utbm.ia54.ant2dgrid.Enum.CellState
import utbm.ia54.ant2dgrid.Enum.AntState
import javafx.scene.layout.Pane
import java.util.UUID
import java.util.Map
import java.util.HashMap
import javafx.scene.shape.Shape
import javafx.scene.paint.Color
import javafx.scene.shape.Polygon

/** 
 * A class contains all informations of the cell
 * @author Michel
 */
class Cell extends Pane{
	
	/* The vector position */
	private var vector : Vector2i
	
	/* A list of ants */
	private var antList : Map<UUID, AntBody>
	
	/* The cell state */
	private var state : CellState
	
	/* The pheromone home */
	private var pheromoneHome : Pheromone
	
	/* The pheromone food */
	private var pheromoneFood : Pheromone
	
	/* Quantity of food in Food place or in Nest place */
	private var foodNest : Food

	/*The shape of an Ant */
	private var shapeAnt : Shape
	
	/*The color of the shape ant */
	private var color : Color
	
	new(){
		this.vector = new Vector2i
		this.state = CellState.NORMAL
		this.antList = new HashMap<UUID, AntBody>
		setColor
		this.pheromoneHome = new Pheromone(AntState.RETURN_HOME)
		this.pheromoneFood = new Pheromone
		setShapeAnt
	}
	
	new(x : int, y : int) {
		this.vector = new Vector2i(x, y)
		this.antList = new HashMap<UUID, AntBody>
		this.state = CellState.NORMAL
		setColor
		this.pheromoneHome = new Pheromone(AntState.RETURN_HOME)
		this.pheromoneFood = new Pheromone
		setShapeAnt
	}
	
	new(v : Vector2i) {
		this.vector = v
		this.antList = new HashMap<UUID, AntBody>
		this.state = CellState.NORMAL
		setColor
		this.pheromoneHome = new Pheromone(AntState.RETURN_HOME)
		this.pheromoneFood = new Pheromone
		setShapeAnt
	}

	new(x : int, y : int, state : CellState) {
		this.vector = new Vector2i(x, y)
		this.antList = new HashMap<UUID, AntBody>
		this.state = state
		setColor
		this.pheromoneHome = new Pheromone(AntState.RETURN_HOME)
		this.pheromoneFood = new Pheromone
		setShapeAnt
	}
	
	new(v : Vector2i, antList : ArrayList<Ant>, state : CellState){
		this.vector = new Vector2i(v)
		this.antList = new HashMap<UUID, AntBody>
		this.state = state
		setColor
		this.pheromoneHome = new Pheromone(AntState.RETURN_HOME)
		this.pheromoneFood = new Pheromone
		setShapeAnt
	}
	
	new(x : int, y : int, antList : Map<UUID, AntBody>, state : CellState) {
		this.vector = new Vector2i(x, y)
		this.antList = antList
		this.state = state
		setColor
		this.pheromoneHome = new Pheromone(AntState.RETURN_HOME)
		this.pheromoneFood = new Pheromone
		setShapeAnt
	}
	
	/*
	 * Gets the position
	 * @return vector the position
	 */
	def getPosition : Vector2i {
		return vector
	}
	
	/*
	 * Sets the position
	 * @param v the position
	 */
	def setPosition(v : Vector2i){
		this.vector = v
	}
	
	/*
	 * Sets the position
	 * @param x the x position
	 * @param y the y position
	 */
	def setPosition(x : int, y : int){
		this.vector.setX(x)
		this.vector.setY(y)
	}
	
	/*
	 * Adds ant on the list
	 * @param id the UUID
	 * @param ant the AntBody
	 */
	def addAnt(id : UUID, ant : AntBody){
		synchronized(antList){
			this.antList.put(id, ant)
			if (this.state === CellState.NORMAL && this.state != CellState.WALL) {
				incrementPheromone(ant.state)
			}
			if (this.antList.size === 1) {
				incrementOpacity
			}
		}
	}
	
	/*
	 * Removes an ant of the list
	 * @param id the UUID
	 * @param ant the AntBody
	 */
	def removeAnt(id : UUID, ant : AntBody){
		synchronized(antList){
			this.antList.remove(id, ant)
			if (this.antList.size === 0) {
				decrementOpacity
			}
		}
	}
	
	/*
	 * Gets the ant list
	 * @return antList
	 */
	def getAntList : Map<UUID, AntBody>{
		synchronized(antList){
			this.antList.unmodifiableView
		}
	}
	
	/*
	 * Gets the the quantity of ant on the cell
	 * @return size the quantity of ant
	 */
	def getNumberAnt : int{
		synchronized(antList){
			this.antList.size
		}
	}
	
	/*
	 * Gets the state of the cell
	 * @return state
	 */
	def getState : CellState{
		this.state
	}
	
	/*
	 * Sets the state of the cell
	 * @param state the CellState
	 */
	def setState(state : CellState){
		this.state = state
		setColor
		if(state === CellState.FOOD){
			this.foodNest = new Food(state)
		}else{
			this.foodNest = new Food(state)
		}
	}

	/*
	 * Gets the pheromone Home
	 * @return pheromoneHome
	 */
	def getPheromoneHome : Pheromone{
		this.pheromoneHome
	}
	
	/*
	 * Gets the pheromone home intensity
	 * @return intensity
	 */
	def getPheromoneHomeIntensity : float {
		synchronized (pheromoneHome) {
			this.pheromoneHome.intensity
		}
	}

	/*
	 * Gets the pheromone food
	 * @return pheromoneFood
	 */
	def getPheromoneFood : Pheromone{
		this.pheromoneFood
	}
	
	/*
	 * Gets the pheromone food intensity
	 * @return intensity
	 */
	def getPheromoneFoodIntensity : float{
		synchronized (pheromoneFood) {
			this.pheromoneFood.intensity
		}
	}
	
	/*
	 * Increments the pheromone home intensity
	 */
	def incrementPheromoneHomeIntensity {
		synchronized(pheromoneHome){
			this.pheromoneHome.incrementIntensity
		}
	}
	
	/*
	 * Increments the pheromone food intensity
	 */
	def incrementPheromoneFoodIntensity{
		synchronized(pheromoneFood){
			this.pheromoneFood.incrementIntensity
		}
	}
	
	/* 
	 * Evaporations the pheromone food intensity
	 */
	def evaporationPheromoneFood {
		synchronized (pheromoneFood) {
			this.pheromoneFood.evaporation
		}
	}
	
	/* 
	 * Evaporations the pheromone home intensity
	 */
	def evaporationPheromoneHome {
		synchronized (pheromoneHome) {
			this.pheromoneHome.evaporation
		}
	}
	
	/*
	 * Removes all ant of the list
	 */
	def removeAllAnt{
		synchronized(antList){
			if (!antList.isEmpty) {
				antList.clear
			}
		}
	}

	/*
	 * Sets the color of the cell
	 */
	def setColor {
		
		var color : String

		switch (this.state) {
			case CellState.WALL:
				color = "#d2691e"
			case CellState.HOME:
				color = "#f0ffff"
			case CellState.FOOD:
				color = "#00ffff"
			default:
				color = "#a9a9a9"
		}
		
		this.style = "-fx-background-color: " + color
	}
	
	/*
	 * Gets the color of the cell
	 * @return style
	 */
	def getColor : String{
		this.style
	}

	/*
	 * Sets the shape of ant
	 */
	private def setShapeAnt : void{
		this.color = new Color(0f, 0f, 1f, 0)
		this.shapeAnt = new Polygon(8.0,0.0,
			12.0,0.0,
			12.0,2.0,
			14.0,3.0,
			12.0,4.0,
			12.0,6.0,
			14.0,7.0,
			12.0,8.0,
			12.0,10.0,
			12.0,12.0,
			14.0,13.0,
			12.0,14.0,
			8.0,14.0,
			6.0,13.0,
			8.0,12.0,
			8.0,10.0,
			8.0,8.0,
			6.0,7.0,
			8.0,6.0,
			8.0,4.0,
			6.0,3.0,
			8.0,2.0,
			8.0,4.0
		)
		this.shapeAnt.fill = this.color
	}
	
	/*
	 * Decrements the opacity of the shape ant
	 */
	def decrementOpacity : void {
		this.color = new Color(this.color.red, this.color.green, this.color.blue, 0f)
		this.shapeAnt.fill = this.color
	}
	
	/*
	 * Increments the opacity of the shape ant
	 */
	def incrementOpacity : void {	
		this.color = new Color(this.color.red, this.color.green, this.color.blue, 1f)
		this.shapeAnt.fill = this.color
	}
	
	/*
	 * Gets the shape ant
	 * @return shapeAnt
	 */
	def getShapeAnt : Shape {
		this.shapeAnt
	}
	
	/*
	 * Increments the pheromones
	 * @param antState the Antstate
	 */
	def incrementPheromone(antState : AntState){
		switch(antState){
			case AntState.RETURN_HOME:
				incrementPheromoneFoodIntensity
			case AntState.SEARCH_FOOD:
				incrementPheromoneHomeIntensity
		}
	}
	
	/*
	 * Gets the quantity of food
	 * @return food
	 */
	def getFood : Food{
		var food : Food
		if(this.state === CellState.FOOD){
			food = this.foodNest
		}else{
			food = this.foodNest
		}
		food
	}
	
	def equals(obj : Object): boolean{
		var bool = false
		if(obj instanceof Cell){
			var cell = obj as Cell
			if(cell.vector.equals(position)){
				bool = true
			}
		}
		bool
	}
	
	def toString : String{
		var string = "Cell : " + vector.toString + "\n Ant : " + antList.size + "\n food : " + pheromoneFood.toString +
			"\n home : " + pheromoneHome.toString + "\n state : " + state
		if(state === CellState.FOOD || state === CellState.HOME){
			string += "\n food : " + foodNest.food
		}
		string
	}
}
